#include "NetHttpPicoOTA.h"

const char* NetHttpPicoOTA::kIndex =
"<!DOCTYPE html><html><head><meta charset='utf-8'/>"
"<meta name='viewport' content='width=device-width,initial-scale=1'/>"
"<title>Slot Pilot OTA</title></head><body>"
"<h2>Slot Pilot Controller (Pico 2 W) - OTA</h2>"
"<ul>"
"<li>Browser OTA: <a href='/update'>/update</a></li>"
"<li>IDE OTA: use Arduino IDE Network Port (hostname below)</li>"
"</ul>"
"<p><a href='/debug'>Open Debug Page</a></p>"
"</body></html>";

void NetHttpPicoOTA::begin(NetUdp* udp, const char* hostname){
  udp_ = udp;

  if(!LittleFS.begin()){
    LOGBUF.add("[HTTP] LittleFS mount FAILED (check Tools->Flash Size w/ LittleFS)");
  } else {
    LOGBUF.add("[HTTP] LittleFS mounted");
  }

  // Arduino IDE OTA
  ArduinoOTA.setHostname(hostname);       // "slot-pilot"
  // ArduinoOTA.setPassword("optional");
  ArduinoOTA.onStart([](){ LOGBUF.add("[OTA] Start"); });
  ArduinoOTA.onEnd([](){ LOGBUF.add("[OTA] End"); });
  ArduinoOTA.onError([](ota_error_t e){ LOGBUF.addf("[OTA] Error %d", (int)e); });
  ArduinoOTA.begin();

  // Browser OTA
  httpUpdater_.setup(&server_);
  server_.on("/", HTTP_GET, [this](){ handleRoot(); });

  // Debug routes
  server_.on("/debug", HTTP_GET, [this](){ pageDebug(); });
  server_.on("/debug.txt", HTTP_GET, [this](){ txtDebug(); });
  server_.on("/debug/clear", HTTP_POST, [this](){ clearDebugPost(); });
  server_.on("/debug/clear", HTTP_GET,  [this](){ clearDebugGet(); });

  server_.on("/dbg/on", HTTP_GET, [this](){ dbgOn(); });
  server_.on("/dbg/off", HTTP_GET, [this](){ dbgOff(); });
  server_.on("/dbg/level", HTTP_GET, [this](){ dbgLevel(); });

  // Car debug via UDP
  server_.on("/car/dbg/on", HTTP_GET, [this](){ carDbgOn(); });
  server_.on("/car/dbg/off", HTTP_GET, [this](){ carDbgOff(); });
  server_.on("/car/dbg/level", HTTP_GET, [this](){ carDbgLevel(); });

  server_.begin();
  LOGBUF.add("[HTTP] WebServer + /update ready :80");
}

void NetHttpPicoOTA::handleRoot(){
  server_.sendHeader("Connection","close");
  server_.send(200,"text/html",kIndex);
}

void NetHttpPicoOTA::pageDebug(){
  String page =
    "<!DOCTYPE html><html><head><meta charset='utf-8'/>"
    "<meta name='viewport' content='width=device-width,initial-scale=1'/>"
    "<title>Slot Pilot Debug</title>"
    "<style>body{font-family:system-ui,Segoe UI,Arial;margin:12px;background:#0b0f14;color:#e6edf3}"
    "h2{margin:0 0 8px} .row{display:flex;gap:8px;align-items:center;margin-bottom:8px;flex-wrap:wrap}"
    "button, a.btn{padding:6px 10px;background:#1f6feb;color:#fff;border:none;border-radius:6px;text-decoration:none}"
    "button.secondary{background:#30363d}"
    ".muted{opacity:.8} pre{background:#0d1117;border:1px solid #30363d;border-radius:8px;padding:8px;white-space:pre-wrap;max-height:65vh;overflow:auto}"
    "</style>"
    "<script>"
    "async function refresh(){const r=await fetch('/debug.txt');document.getElementById('log').textContent=await r.text();}"
    "async function clearLog(){await fetch('/debug/clear',{method:'POST'}); await refresh();}"
    "async function dbgOn(){await fetch('/dbg/on'); await refresh();}"
    "async function dbgOff(){await fetch('/dbg/off'); await refresh();}"
    "async function dbgLevel(n){await fetch('/dbg/level?n='+n); await refresh();}"
    "async function carDbgOn(){await fetch('/car/dbg/on');}"
    "async function carDbgOff(){await fetch('/car/dbg/off');}"
    "async function carDbgLevel(n){await fetch('/car/dbg/level?n='+n);}"
    "setInterval(refresh,2000); window.onload=refresh;"
    "</script></head><body>";
  page += "<h2>Slot Pilot Debug</h2>";
  page += "<div class='row'><a class='btn' href='/'>&larr; OTA</a>";
  page += "<button class='secondary' onclick='refresh()'>Refresh</button>";
  page += "<button class='secondary' onclick='clearLog()'>Clear Logs</button>";
  page += "<button onclick='dbgOn()'>Local Debug ON</button>";
  page += "<button onclick='dbgOff()'>Local Debug OFF</button>";
  page += "<span class='muted'>Level:</span>";
  page += "<button onclick='dbgLevel(1)'>1</button><button onclick='dbgLevel(2)'>2</button><button onclick='dbgLevel(3)'>3</button>";
  page += "<span class='muted'>&nbsp;&nbsp;Now: ";
  page += (DEBUG_MODE ? "ON" : "OFF");
  page += " · L"; page += String((int)DEBUG_LEVEL);
  page += "</span></div>";
  page += "<div class='row'><span class='muted'>Remote Car:</span>";
  page += "<button onclick='carDbgOn()'>Car Debug ON</button><button onclick='carDbgOff()'>Car Debug OFF</button>";
  page += "<button onclick='carDbgLevel(1)'>Car L1</button><button onclick='carDbgLevel(2)'>Car L2</button><button onclick='carDbgLevel(3)'>Car L3</button></div>";
  page += "<pre id='log'>loading…</pre></body></html>";
  server_.send(200,"text/html",page);
}

void NetHttpPicoOTA::txtDebug(){ server_.send(200,"text/plain", LOGBUF.toText()); }
void NetHttpPicoOTA::clearDebugPost(){ LOGBUF.clear(); server_.send(200,"text/plain","CLEARED\n"); }
void NetHttpPicoOTA::clearDebugGet(){ LOGBUF.clear(); server_.sendHeader("Location","/debug"); server_.send(302); }

void NetHttpPicoOTA::dbgOn(){ DEBUG_MODE=true; LOGBUF.add("[HTTP] Local Debug ON"); server_.sendHeader("Location","/debug"); server_.send(302); }
void NetHttpPicoOTA::dbgOff(){ DEBUG_MODE=false; server_.sendHeader("Location","/debug"); server_.send(302); }
void NetHttpPicoOTA::dbgLevel(){
  int n=-1; if(server_.hasArg("n")) n=server_.arg("n").toInt();
  if(n>=1 && n<=3){ DEBUG_LEVEL=n; LOGBUF.addf("[HTTP] Local Debug Level=%d", n); server_.sendHeader("Location","/debug"); server_.send(302); }
  else server_.send(400,"text/plain","Usage: /dbg/level?n=1..3\n");
}

// car debug via UDP
void NetHttpPicoOTA::carDbgOn(){ if(udp_) udp_->send("DBG|ON");  server_.sendHeader("Location","/debug"); server_.send(302); }
void NetHttpPicoOTA::carDbgOff(){ if(udp_) udp_->send("DBG|OFF"); server_.sendHeader("Location","/debug"); server_.send(302); }
void NetHttpPicoOTA::carDbgLevel(){
  int n=-1; if(server_.hasArg("n")) n=server_.arg("n").toInt();
  if(n>=1 && n<=3){ if(udp_) udp_->send(String("DBG|LEVEL|")+n); server_.sendHeader("Location","/debug"); server_.send(302); }
  else server_.send(400,"text/plain","Usage: /car/dbg/level?n=1..3\n");
}
